from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import speech_recognition as sr
from datetime import datetime
from telebot import TeleBot
from telebot import types
import soundfile as sf
import requests
import sqlite3
import time
import json
import pytz
import uuid
import os
from se import BOT_TOKEN, ADMIN_CHAT_ID, ADMIN_ID

BOT_TOKEN
VOICE_LANGUAGE = 'ru-RU'
MAX_MESSAGE_SIZE = 50 * 1024 * 1024
MAX_MESSAGE_DURATION = 120

bot = TeleBot(BOT_TOKEN)

start_time = time.time()

# –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
conn_users = sqlite3.connect("users.db", check_same_thread=False)
cursor_users = conn_users.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
cursor_users.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    chat_id TEXT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    username TEXT,
    language TEXT DEFAULT "Unknown",
    joined_at TEXT DEFAULT CURRENT_TIMESTAMP
)
''')
conn_users.commit()

# –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
conn_groups = sqlite3.connect("groups.db", check_same_thread=False)
cursor_groups = conn_groups.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
cursor_groups.execute('''
CREATE TABLE IF NOT EXISTS groups (
    group_id INTEGER PRIMARY KEY,
    group_name TEXT NOT NULL,
    invite_link TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
)
''')
conn_groups.commit()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
cursor_groups.execute('''
CREATE TABLE IF NOT EXISTS group_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    group_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    username TEXT,
    message_count INTEGER DEFAULT 0,
    is_admin INTEGER DEFAULT 0
)
''')
conn_groups.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(message):
    try:
        cursor_users.execute('''
        INSERT OR REPLACE INTO users (user_id, chat_id, first_name, last_name, username, language)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            message.from_user.id,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_user.username,
            message.from_user.language_code or "Unknown"
        ))
        conn_users.commit()
        print(f"User {message.from_user.id} saved successfully.")
    except Exception as e:
        print(f"Error saving user data: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
def save_group(group_id, group_name, invite_link=None):
    try:
        if invite_link is None:
            try:
                invite_link = bot.export_chat_invite_link(group_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} ({group_id}): {e}")
                invite_link = None
        cursor_groups.execute('''
        INSERT OR REPLACE INTO groups (group_id, group_name, invite_link)
        VALUES (?, ?, ?)
        ''', (group_id, group_name, invite_link))
        conn_groups.commit()
        print(f"Group {group_name} ({group_id}) saved successfully with invite link: {invite_link}")
    except Exception as e:
        print(f"Error saving group data: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
def update_user_in_group(group_id, user_id, username, is_admin):
    try:
        cursor_groups.execute('''
        INSERT INTO group_users (group_id, user_id, username, message_count, is_admin)
        VALUES (?, ?, ?, 1, ?)
        ON CONFLICT(group_id, user_id) DO UPDATE SET
            message_count = message_count + 1,
            is_admin = CASE WHEN is_admin = 0 THEN ? ELSE is_admin END
        ''', (group_id, user_id, username, is_admin, is_admin))
        conn_groups.commit()
    except Exception as e:
        print(f"Error updating user in group: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
def create_group_db(group_name):
    db_path = f"{group_name}.db"
    conn = sqlite3.connect(db_path, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS group_users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        message_count INTEGER DEFAULT 0,
        is_admin INTEGER DEFAULT 0
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS group_info (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        total_users INTEGER DEFAULT 0,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    return conn, cursor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
def update_group_user(group_name, user_id, username, is_admin=False):
    db_path = f"{group_name}.db"
    conn = sqlite3.connect(db_path, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO group_users (user_id, username, message_count, is_admin)
    VALUES (?, ?, 1, ?)
    ON CONFLICT(user_id) DO UPDATE SET
        message_count = message_count + 1,
        is_admin = CASE WHEN is_admin = 0 THEN ? ELSE is_admin END
    ''', (user_id, username, is_admin, is_admin))
    conn.commit()
    cursor.execute('SELECT COUNT(*) FROM group_users')
    total_users = cursor.fetchone()[0]
    cursor.execute('UPDATE group_info SET total_users = ? WHERE id = 1', (total_users,))
    conn.commit()
    conn.close()




# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    if message.chat.type in ["group", "supergroup"]:
        group_id = message.chat.id
        group_name = message.chat.title
        invite_link = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ
        save_group(group_id, group_name, invite_link)
        # –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        conn, cursor = create_group_db(group_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –æ –≥—Ä—É–ø–ø–µ
        cursor.execute('SELECT COUNT(*) FROM group_info')
        if cursor.fetchone()[0] == 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≥—Ä—É–ø–ø–µ
            cursor.execute('INSERT INTO group_info (total_users) VALUES (0)')
            conn.commit()

        conn.close()

        send_welcome_group = (
            f"<b>–ü—Ä–∏–≤–µ—Ç, –≥—Ä—É–ø–ø–∞ {group_name}!</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å! üòä\n\n"
            "<b>–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç.\n\n"
            "–ù–∞—à–µ —Å–µ–º–µ–π—Å—Ç–≤–æ NX –ë–æ—Ç–æ–≤ - /nx_family\n"
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - /feedback"
        )


        bot.send_message(message.chat.id, send_welcome_group, parse_mode="HTML")
    else:
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user(message)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
        markup = types.InlineKeyboardMarkup()
        add_to_group_button = types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{bot.get_me().username}?startgroup=true"
        )
        markup.add(add_to_group_button)

        welcome_message = (
            f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã</b>\n\n"
            "<b>–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –í—ã —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏. üòä</b>\n\n"
            "<blockquote><b>–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç.</b>\n"
            "<b>–≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å.</b></blockquote>\n"
            "–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –í–∞—à—É –≥—Ä—É–ø–ø—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n"
            "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start.\n\n"
            "–ù–∞—à–µ —Å–µ–º–µ–π—Å—Ç–≤–æ NX –ë–æ—Ç–æ–≤ - /nx_family\n"
            "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - /feedback"
        )
        bot.send_message(chat_id, welcome_message, parse_mode="HTML", reply_markup=markup)



















@bot.message_handler(content_types=['voice'])
def echo_voice(message):
    data = message.voice
    if (data.file_size > MAX_MESSAGE_SIZE) or (data.duration > MAX_MESSAGE_DURATION):
        reply = ' '.join((
            "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {} —Å–µ–∫.".format(MAX_MESSAGE_DURATION),
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ –∫–æ—Ä–æ—á–µ.",
        ))
        return bot.reply_to(message, reply)

    file_url = "https://api.telegram.org/file/bot{}/{}".format(
        bot.token,
        bot.get_file(data.file_id).file_path
    )

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    file_path = download_file(file_url)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç PCM_16
    convert_to_pcm16(file_path)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    text = process_audio_file("action/new.wav")

    if not text:
        return bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

    return bot.reply_to(message, text)

def download_file(file_url):
    file_path = "action/voice_message.ogg"
    with open(file_path, 'wb') as f:
        response = requests.get(file_url)
        f.write(response.content)
    return file_path

def convert_to_pcm16(file_path):
    data, samplerate = sf.read(file_path)
    sf.write('action/new.wav', data, samplerate, subtype='PCM_16')

def process_audio_file(file_path):
    recognizer = sr.Recognizer()
    with sr.AudioFile(file_path) as source:
        audio_data = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio_data, language=VOICE_LANGUAGE)
        return text
    except sr.UnknownValueError:
        return None












@bot.message_handler(commands=["ping"])
def send_ping(message):

    try:
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        start_time = time.time()
        bot.send_message(message.chat.id, "üèì <b>Pong!</b>", parse_mode="HTML")
        time.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞

        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "<i>–•–º, –ª–∞–¥–Ω–æ...</i>", parse_mode="HTML")
        time.sleep(0.5)  # –ü–∞—É–∑–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã

        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
        end_time = time.time()
        response_time = round((end_time - start_time) * 1000, 2)  # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        # –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        bot.send_message(
            message.chat.id,
            (
                f"ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!\n"
                f"‚è± <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</b> {response_time} –º—Å\n"
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["uptime"])
def send_uptime(message):

    try:
        # –í—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        current_time = time.time()
        uptime_seconds = int(current_time - start_time)  # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –î–î:–ß–ß:–ú–ú:–°–°
        days = uptime_seconds // 86400  # 1 –¥–µ–Ω—å = 86400 —Å–µ–∫—É–Ω–¥
        hours = (uptime_seconds % 86400) // 3600
        minutes = (uptime_seconds % 3600) // 60
        seconds = uptime_seconds % 60

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Å–∞–º–∏
        uptime_message = (
            f"ü§ñ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b>\n"
            f"<b>{hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫</b>\n"
            f"<b>{days} –¥ {hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫</b>"
        )
        
        bot.send_message(message.chat.id, uptime_message, parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")




















#===============================NX —Å–µ–º—å—è==============================================================================

@bot.message_handler(commands=['nx_family'])
def send_support_message(message):
    
    keyboard = types.InlineKeyboardMarkup()
    NX_Louer = types.InlineKeyboardButton(
        text="NX Louer üåê", url="https://t.me/NX_Louer_bot")
    NX_Support = types.InlineKeyboardButton(
        text="NX –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è", url="https://t.me/NX_Support_bot")
    NX_News_Trading = types.InlineKeyboardButton(
        text="NX News Trading üì∞", url="https://t.me/NXNews_Trading_bot")
    NX_Echo = types.InlineKeyboardButton(
        text="NX Echo üéôÔ∏è", url="https://t.me/NX_Echo_bot")
    NX_Searcher = types.InlineKeyboardButton(
        text="NX Searcher AI üîç", url="https://t.me/NX_Searcher_bot")
    keyboard.add(NX_Echo, NX_Louer)
    keyboard.add(NX_Support)
    keyboard.add(NX_Searcher)
    keyboard.add(NX_News_Trading)

    with open("NX Family.png", "rb") as photo:
        caption_message = (
            f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, <b>{message.from_user.first_name}</b>.üëã\n"
            "üë• –¢—É—Ç —Å–æ–±—Ä–∞–Ω–æ —Å–µ–º–µ–π—Å—Ç–≤–æ –Ω–∞—à–∏—Ö NX –ë–æ—Ç–æ–≤, —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
            "üîπ <b>NX Echo</b>üéôÔ∏è ‚Äî –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç, —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.\n"
            "üîπ <b>NX Louer</b> üåê ‚Äî –í–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.\n"
            "üîπ <b>NX –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚öôÔ∏è ‚Äî –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º.\n"
            "üîπ <b>NX Searcher AI</b> üîç ‚Äî –û—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–≤ –≤–æ–ø—Ä–æ—Å, —Å–¥–µ–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ AI.\n"
            "üîπ <b>NX News Trading</b> üì∞ ‚Äî –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.\n\n"
            "–í –±—É–¥—É—â–µ–º —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—Å—è !)\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö <u>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</u> üöÄ</b>"
        )
        bot.send_photo(message.chat.id, photo, caption_message, parse_mode="HTML", reply_markup=keyboard)

#=========================================–≥—Ä—É–ø–ø—ã==========================================================================

@bot.message_handler(func=lambda message: message.text.startswith('/nx_family'))
def send_support_message(message):
    if message.chat.type not in ['group', 'supergroup']:
        return

    keyboard = types.InlineKeyboardMarkup()
    NX_Louer = types.InlineKeyboardButton(
        text="NX Louer üåê", url="https://t.me/NX_Louer_bot")
    NX_Support = types.InlineKeyboardButton(
        text="NX –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è", url="https://t.me/NX_Support_bot")
    NX_News_Trading = types.InlineKeyboardButton(
        text="NX News Trading üì∞", url="https://t.me/NXNews_Trading_bot")
    NX_Echo = types.InlineKeyboardButton(
        text="NX Echo üéôÔ∏è", url="https://t.me/NX_Echo_bot")
    NX_Searcher = types.InlineKeyboardButton(
        text="NX Searcher AI üîç", url="https://t.me/NX_Searcher_bot")
    keyboard.add(NX_Echo, NX_Louer)
    keyboard.add(NX_Support)
    keyboard.add(NX_Searcher)
    keyboard.add(NX_News_Trading)

    with open("NX Family.png", "rb") as photo:
        caption_message = (
            f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, <b>{message.from_user.first_name}</b>.üëã\n"
            "üë• –¢—É—Ç —Å–æ–±—Ä–∞–Ω–æ —Å–µ–º–µ–π—Å—Ç–≤–æ –Ω–∞—à–∏—Ö NX –ë–æ—Ç–æ–≤, —É –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
            "üîπ <b>NX Echo</b>üéôÔ∏è ‚Äî –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç, —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.\n"
            "üîπ <b>NX Louer</b> üåê ‚Äî –í–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.\n"
            "üîπ <b>NX –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚öôÔ∏è ‚Äî –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º.\n"
            "üîπ <b>NX Searcher AI</b> üîç ‚Äî –û—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–≤ –≤–æ–ø—Ä–æ—Å, —Å–¥–µ–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ AI.\n"
            "üîπ <b>NX News Trading</b> üì∞ ‚Äî –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.\n\n"
            "–í –±—É–¥—É—â–µ–º —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—Å—è !)\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö <u>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</u> üöÄ</b>"
        )
        bot.send_photo(message.chat.id, photo, caption_message, parse_mode="HTML", reply_markup=keyboard)



#=========================================NX —Å–µ–º—å—è –≥—Ä—É–ø–ø—ã –∫–æ–Ω–µ—Ü======================================================================



#==================== —Ä–∞—Å—Å—ã–ª–∫–∞ ===============================================

@bot.message_handler(commands=["broadcast"])
def broadcast_message(message):
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = message.text.replace("/broadcast", "").strip()
    if not broadcast_text:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ profiles.json
    with open("json/profiles.json", "r") as f:
        users = json.load(f)

    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success_count = 0
    for user_data in users.values():
        try:
            bot.send_message(user_data["chat_id"], broadcast_text, parse_mode="HTML")
            success_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['user_id']}: {e}")

    bot.reply_to(message, f"–ü–æ–ª—É—á–∏–ª–∏ —Å–º—Å - {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

#==================== —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–µ—Ü ===============================================

#========================= —Ñ–∏–¥–±–µ–∫ —Ç—è–∂–µ–ª–æ ====================================



feedback_data = {}

@bot.message_handler(commands=['feedback'])
def feedback_start(message):
    user_id = str(message.from_user.id)
    user_id = message.chat.id
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("–û—à–∏–±–∫–∞", callback_data=f"feedback_category:–û—à–∏–±–∫–∞"),
        InlineKeyboardButton("–û–±—â–µ–µ", callback_data=f"feedback_category:–û–±—â–µ–µ")
    )
    markup.row(
        InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"feedback_category:–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    )
    feedback_data[user_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("feedback_category:"))
def feedback_category_selected(call):
    user_id = call.message.chat.id
    category = call.data.split(":")[1]
    feedback_data[user_id]['category'] = category  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler_by_chat_id(user_id, feedback_text_handler)

def feedback_text_handler(message):
    user_id = message.chat.id
    feedback_text = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    
    if feedback_text:
        feedback_data[user_id]['text'] = feedback_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users.json
        try:
            with open('json/users.json', 'r') as f:
                users = json.load(f)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
        except (FileNotFoundError, json.JSONDecodeError):
            users = []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = next((u for u in users if u["id"] == user_id), None)
        if user:
            user_feedback_count = user.get('feedback_count', 0) + 1
            user['feedback_count'] = user_feedback_count  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        else:
            user_name = message.chat.username or message.chat.first_name
            join_date = time.time()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UNIX
            users.append({
                "id": user_id,
                "name": user_name,
                "join_date": join_date,
                "feedback_count": 1
            })
            user_feedback_count = 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ users.json
        with open('json/users.json', 'w') as f:
            json.dump(users, f, indent=4)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞
        feedback_id = str(uuid.uuid4())

        # –í—Ä–µ–º—è –ø–æ –ö–∏–µ–≤—É (UTC+3)
        kiev_tz = pytz.timezone('Europe/Kiev')
        time_in_kiev = datetime.now(kiev_tz)
        formatted_time = time_in_kiev.strftime('%Y-%m-%d %H:%M:%S')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        category = feedback_data[user_id].get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        user_name = message.chat.username or message.chat.first_name
        message_to_send = (
            f"<b>üö® –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n"
            f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <b>{user_name}</b> (<code>{user_id}</code>)\n"
            f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.fromtimestamp(user['join_date'], kiev_tz).strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"<b>üìà –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:</b> {user_feedback_count}\n"
            f"<b>‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–∑—ã–≤–∞:</b> {formatted_time} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)\n"
            f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
            f"<b>üÜî ID –æ—Ç–∑—ã–≤–∞:</b> {feedback_id}\n\n"
            f"<b>üìù –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n"
            f"<i>{feedback_text}</i>\n\n"
            f"<b>üìû –°–≤—è–∑—å:</b> <a href='tg://user?id={user_id}'>–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n"
            f"<b>üëâ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –≥—Ä—É–ø–ø—É
        bot.send_message(ADMIN_CHAT_ID, message_to_send, parse_mode='HTML')
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫—É.\n"
                                  "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ.")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        feedback_data.pop(user_id, None)
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


#========================= —Ñ–∏–¥–±–µ–∫ end ====================================




# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
@bot.message_handler(func=lambda message: message.chat.type in ["group", "supergroup"])
def handle_group_messages(message):
    group_name = message.chat.title
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    is_admin = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    try:
        admins = bot.get_chat_administrators(message.chat.id)
        if any(admin.user.id == user_id for admin in admins):
            is_admin = 1
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
    update_group_user(group_name, user_id, username, is_admin)

if __name__ == "__main__":

    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            bot.polling(none_stop=True)  # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ polling
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        else:
            print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            bot.send_message(ADMIN_CHAT_ID, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞